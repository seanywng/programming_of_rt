---
title: "Part 2: spatial tricks with ambient"
format: html
editor: visual
---

```{r setup}

library(dplyr)
library(purrr)
library(tibble)
library(ggplot2)
library(ggthemes)
library(ambient)

```

```{r}
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}
```


```{r}
sample_data <- function(seed = NULL, n = 100){
  if(!is.null(seed)) set.seed(seed)
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.2, max = .2),
    y1 = y0 + runif(n, min = -.2, max = .2),
    shade = runif(n), 
    size = runif(n),
    shape = factor(sample(0:22, size = n, replace = TRUE))
  )
}

sample_cross_matrix <- function(n = 10, seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  mat <- matrix(data = 0, nrow = n, ncol = n)
  mat[sample(n, 1), ] <- 1
  mat[, sample(n, 1)] <- 1
  return(mat)
}

sample_cross_matrix()
```

```{r}
image(sample_cross_matrix(n = 50), axes = FALSE, useRaster = TRUE)


```

# ambient

```{r}
x_coords <- seq(from = 0, to = 1, length.out = 800)
y_coords <- seq(from = 0, to = 1, length.out = 800)

canvas <- long_grid(x = x_coords, y = y_coords)
canvas
```



```{r}
gen_perlin(x = 1:5, y = 1, frequency = .001, seed = 1)
```

```{r}
gen_perlin(x = 1:5, y = 1, frequency = .5, seed = 1)
```

```{r}

canvas <- canvas |> 
  mutate(paint = gen_perlin(x, y, frequency = 193, seed = 34))

canvas
```

```{r}
art <- ggplot(canvas, aes(x, y, fill = paint)) + 
  geom_raster(show.legend = FALSE)
```

```{r}
art

art + 
  theme_void() + 
  coord_equal()

art + 
  theme_void() + 
  coord_equal() + 
  scale_x_continuous(expand = c(0, 0)) + 
  scale_y_continuous(expand = c(0, 0)) + 
  scale_fill_gradientn(colours = sample_canva())
```


```{r}
make_noise_art <- function(
    
  generator = gen_perlin,
  frequency = 10, 
  seed = 1234, 
  pixels = 2000, 
  palette = c("#e5ddc8", "#01949a", "#004369", "#db1f48"),
  ...
) {
  # define the grid
  canvas <- long_grid(
    x = seq(from = 0, to = 1, length.out = pixels), 
    y = seq(from = 0, to = 1, length.out = pixels)
  )
  
  # use the generator to add paint
  canvas <- canvas |> 
    mutate(
      paint = generator(
        x, y, frequency = frequency, 
        seed = seed,
        ...
      )
    )
  
  #  use ggplot to draw the picture
  art <- canvas |> 
    ggplot(aes(x, y, fill = paint)) + 
    geom_raster(show.legend = FALSE) + 
    theme_void() + 
    coord_equal() + 
    scale_x_continuous(expand = c(0, 0)) + 
    scale_y_continuous(expand = c(0, 0)) + 
    scale_fill_gradientn(colours = palette) 
  
  return(art)
}
```


```{r}
# This one is nice, but maybe increase the resolution
make_noise_art(seed = 1234, frequency = 29.4, palette = sample_canva(seed = 157), generator = gen_worley, pixels = 4000)
```

```{r}
blank_canvas <- long_grid(
  x = seq(from = 0, to = 1, length.out = 2000),
  y = seq(from = 0, to = 1, length.out = 2000)
) 
```

```{r}
plot_painted_canvas <- function(canvas, palette = NULL) {
  if(is.null(palette)) {
    palette <- c("#e5ddc8","#01949a","#004369","#db1f48")
  }
  canvas |> 
    ggplot(aes(x, y, fill = paint)) + 
    geom_raster(show.legend = FALSE) +
    theme_void() +
    coord_equal() +
    scale_x_continuous(expand = c(0, 0)) +
    scale_y_continuous(expand = c(0, 0)) +
    scale_fill_gradientn(colours = palette)
}
```

> However, rewriting the function in a pipe allows us to use dplyr for data manipulation

```{r}
blank_canvas |>
  mutate(paint = gen_perlin(x, y, frequency = 90, seed = 1234)) |>
  plot_painted_canvas()
```

> Meaning that we can do things like this: 

```{r}
blank_canvas |> 
  mutate(
    lf_noise = gen_simplex(x, y, frequency = 1, seed = 1234),
    mf_noise = gen_simplex(x, y, frequency = 20, seed = 1234),
    hf_noise = gen_simplex(x, y, frequency = 99, seed = 1234),
    paint = lf_noise + mf_noise + hf_noise
  ) |>
  plot_painted_canvas()
```

```{r}
blank_canvas |> 
  mutate(
    lf_noise = gen_simplex(x, y, frequency = 1),
    mf_noise = gen_simplex(x, y, frequency = 20),
    hf_noise = gen_simplex(x, y, frequency = 99),
    gate = gen_spheres(x, y, frequency = 10) |> normalise(),
    paint = lf_noise +
      (1 + mf_noise) * (gate >= .1 & gate < .6) +
      (1 + hf_noise) * (gate >= .05)
  ) |>
  plot_painted_canvas(palette = sample_canva(seed = 2))
```


```{r}
# I like this one

blank_canvas |> 
  mutate(
    lf_noise = gen_simplex(x, y, frequency = 1),
    mf_noise = gen_simplex(x, y, frequency = 20),
    hf_noise = gen_simplex(x, y, frequency = 99),
    gate = gen_simplex(x, y, frequency = 10) |> normalise(),
    paint = lf_noise +
      (2 + mf_noise) * (gate >= .52 & gate < .58) +
      (2.1 + hf_noise) * (gate >= .15)
  ) |>
  plot_painted_canvas(palette = sample_canva(seed = 47))


```

```{r}
# Life
blank_canvas |> 
  mutate(
    lf_noise = gen_simplex(x, y, frequency = 1),
    mf_noise = gen_simplex(x, y, frequency = 20),
    hf_noise = gen_simplex(x, y, frequency = 99),
    gate = gen_simplex(x, y, frequency = 10) |> normalise(),
    paint = lf_noise +
      (2.3 + mf_noise) * (gate >= .52 & gate < .58) +
      (1.1 + hf_noise) * (gate >= .233)
  ) |>
  plot_painted_canvas(palette = sample_canva(seed = 47))
```


```{r}
# Growth
blank_canvas |> 
  mutate(
    lf_noise = gen_simplex(x, y, frequency = 1),
    mf_noise = gen_simplex(x, y, frequency = 20),
    hf_noise = gen_simplex(x, y, frequency = 99),
    gate = gen_simplex(x, y, frequency = 10) |> normalise(),
    paint = lf_noise +
      (2 + mf_noise) * (gate >= .05 & gate < .55) +
      (2.1 + hf_noise) * (gate >= .19)
  ) |>
  plot_painted_canvas(palette = sample_canva(seed = 47))
```

  
# Fractals 

```{r}
gen_sin <- function(x, frequency, ...) {
  sin(x * frequency)
}
```

```{r}
fbm <- function(base, new, strength, ...) {
  base + new * strength
}
```


```{r}
fracture(
  x = 1:20, 
  noise = gen_sin, 
  fractal = fbm, 
  octaves = 8
)
```


```{r}
dat <- tibble(
  x = seq(0, 10, length.out = 1000), 
  y1 = fracture(x = x, noise = gen_sin, fractal = fbm, octaves = 1),
  y2 = fracture(x = x, noise = gen_sin, fractal = fbm, octaves = 2),
  y8 = fracture(x = x, noise = gen_sin, fractal = fbm, octaves = 8),
  y20 = fracture(x = x, noise = gen_sin, fractal = fbm, octaves = 20)
) 

ggplot(dat) + geom_path(aes(x, y1)) + ggtitle("One iteration")
ggplot(dat) + geom_path(aes(x, y2)) + ggtitle("Two iterations")
ggplot(dat) + geom_path(aes(x, y8)) + ggtitle("Eight iterations")
ggplot(dat) + geom_path(aes(x, y20)) + ggtitle("Twenty iterations")

```


```{r}
custom_fracture <- function(x, ...) {
  fracture(
    gain = function(strength) {strength * .8}, 
    frequency = function(frequency) {frequency * 1.3}, 
    noise = gen_sin, 
    fractal = fbm, 
    x = x, 
    ...
  )
}


```

```{r}
dat <- tibble(
  x = seq(0, 10, length.out = 1000), 
  y1 = custom_fracture(x, octaves = 1), 
  y2 = custom_fracture(x, octaves = 2), 
  y8 = custom_fracture(x, octaves = 8), 
  y20 = custom_fracture(x, octaves = 20)
)
```

```{r}
ggplot(dat) + geom_path(aes(x, y20))
```


## fractal_art() 

```{r}
fractal_art <- function(fractal, generator, palette = NULL, ...) {
  blank_canvas |> 
    mutate(
      paint = fracture(
        noise = generator, 
        fractal = fractal, 
        x = x,
        y = y, 
        ...
      )
    ) |> 
    plot_painted_canvas(palette = palette)
}
```


```{r}
fractal_art(fbm, gen_checkerboard, seed = 1, octaves = 20)

fractal_art(fbm, gen_waves, seed = 1, octaves = 20)
```

```{r}
# gen_simplex before the application of fractal art
blank_canvas |> 
  mutate(paint = gen_simplex(x, y, seed = 2)) |> 
  plot_painted_canvas()

fractal_art(fbm, gen_simplex, seed = 2, octaves = 20)
fractal_art(ridged, gen_simplex, seed = 2, octaves = 20)

```

```{r}
gf <- function(x) x * .8

fractal_art(ridged, gen_simplex, seed = 2, octaves = 20, gain = gf)
```

   
```{r}
blank_canvas |>
  mutate(paint = gen_worley(x, y, seed = 6)) |>
  plot_painted_canvas()
```
   
   
```{r}
fractal_art(billow, gen_worley, seed = 6, octaves = 8)


# 12 octaves is quite promising 
fractal_art(billow, gen_worley, seed = 6, octaves = 12)

blank_canvas |> 
    mutate(
        paint = billow(
        noise = gen_worley, 
        fractal = fractal, 
        x = x,
        y = y, 
        seed = 6, 
        octaves = 12
      )
    ) |> 
    plot_painted_canvas(palette = sample_canva(seed = 47))


fractal_art2 <- function(fractal, generator, palette = NULL, ...) {
  blank_canvas |> 
    mutate(
      paint = fracture(
        noise = generator, 
        fractal = fractal, 
        x = x,
        y = y, 
        ...
      )
    ) 
}


fractal_art2(billow, gen_worley, seed = 6, octaves = 10)|> 
    plot_painted_canvas(palette = sample_canva(seed = 47))
```
   
```{r}
fractal_art(billow, gen_worley, seed = 6, octaves = 8, value = "distance")
```
   
   
```{r}
blank_canvas |>
  mutate(paint = gen_worley(x, y, seed = 6, value = "distance")) |>
  plot_painted_canvas()


```
   
   
   
```{r}
gen_scope <- function(x, y, ...) {
  worley_cell <- gen_worley(x, y, value = "cell", ...)
  worley_dist <- gen_worley(x, y, value = "distance", ...)
  return(normalise(worley_cell) + 5 * normalise(worley_dist))
}

pal <- sample_canva(seed = 2)

pal_alt <- sample_canva(seed = 22)

blank_canvas |> 
  mutate(paint = gen_scope(x, y, seed = 9)) |> 
  plot_painted_canvas(palette = pal)
```
   
```{r}
fractal_art(
  billow, gen_scope, palette = pal_alt, seed = 9, octaves = 13
)
```
   
```{r}
gen_gate <- function(x, y, frequency, ...) {
  lf <- gen_simplex(x, y, frequency = frequency, ...)
  mf <- gen_simplex(x, y, frequency = frequency * 20)
  hf <- gen_simplex(x, y, frequency = frequency * 99) 
  gate <- gen_simplex(x, y, frequency = frequency * 10, ...)
  gate <- normalise(gate)
  paint <- lf + 
    (mf + 2) * (gate >= .2 & gate < .8) + 
    (hf + 2) * (gate >= .1)
  return(paint)
}

gen_gate2 <- function(x, y, frequency, ...) {
  lf <- gen_simplex(x, y, frequency = frequency, ...)
  mf <- gen_simplex(x, y, frequency = frequency * 20)
  hf <- gen_simplex(x, y, frequency = frequency * 99) 
  gate <- gen_simplex(x, y, frequency = frequency * 10, ...)
  gate <- normalise(gate)
  paint <- lf + 
    (mf + 2.3) * (gate >= .52 & gate < .58) + 
    (hf + 6.1) * (gate >= .233)
  return(paint)
  
}
```

```{r}
fractal_art(billow, gen_gate, palette = sample_canva(seed = 47), seed = 18, octaves = 18)
```

```{r}
gen_gate2 <- function(x, y, frequency, ...) {
  lf <- gen_simplex(x, y, frequency = frequency, ...)
  mf <- gen_simplex(x, y, frequency = frequency * 20)
  hf <- gen_simplex(x, y, frequency = frequency * 99) 
  gate <- gen_simplex(x, y, frequency = frequency * 10, ...)
  gate <- normalise(gate)
  paint <- lf + 
    (mf + 2.3) * (gate >= .52 & gate < .58) + 
    (hf + 6.1) * (gate >= .233)
  return(paint)
  
}
fractal_art(billow, gen_gate2, palette = sample_canva(seed = 47), seed = 19, octaves = 10)
```

```{r}

# Corruption

gen_gate3 <- function(x, y, frequency, ...) {
  lf <- gen_simplex(x, y, frequency = frequency, ...)
  mf <- gen_simplex(x, y, frequency = frequency * 20)
  hf <- gen_simplex(x, y, frequency = frequency * 99) 
  gate <- gen_simplex(x, y, frequency = frequency * 10, ...)
  gate <- normalise(gate)
  paint <- lf + 
    (mf + 2.3) * (gate >= .22 & gate < .58) + 
    (hf + 5.1) * (gate >= .233)
  return(paint)

  }

fractal_art(billow, gen_gate3, palette = sample_canva(seed = 47), seed = 19, octaves = 10)
```
   
   
   
   
   
   
   
   